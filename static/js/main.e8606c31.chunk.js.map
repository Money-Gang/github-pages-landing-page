{"version":3,"sources":["components/organisms/slideContent.js","components/organisms/slideContent2.js","components/organisms/slider.js","components/organisms/header.js","App.js","serviceWorker.js","index.js"],"names":["SlideContent","props","Background","process","path","className","title","style","backgroundImage","Slider","sliderArr","useState","x","setX","goTo","event","target","value","map","item","index","transform","id","onClick","length","Header","href","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAGe,SAASA,EAAaC,GACjC,IAAIC,EAAaC,6BAAyBF,EAAMG,KAChD,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,eAAeJ,EAAMK,OACnC,uBAAGD,UAAU,mBAAb,sLAKJ,yBAAKA,UAAU,sBAAsBE,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAT,SCX1D,SAASF,EAAaC,GACjC,IAAIC,EAAaC,6BAAyBF,EAAMG,KAChD,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,iBAAiBJ,EAAMK,OACrC,uBAAGD,UAAU,qBAAb,sLAKJ,yBAAKA,UAAU,wBAAwBE,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAT,SCR5D,SAASO,IAEpB,IAAIC,EAAY,CAAC,kBAACV,EAAD,CAAcM,MAAM,qCAAqCF,KAAK,2BAA6B,kBAAC,EAAD,CAAeE,MAAM,UAAUF,KAAK,2BAA6B,kBAAC,EAAD,CAAeE,MAAM,UAAUF,KAAK,2BAA6B,kBAACJ,EAAD,CAAcM,MAAM,UAAUF,KAAK,2BAA6B,kBAACJ,EAAD,CAAcM,MAAM,UAAUF,KAAK,4BAFpT,EAGXO,mBAAS,GAHE,mBAGtBC,EAHsB,KAGnBC,EAHmB,KAavBC,EAAO,SAACC,GACVF,EAAkC,KAA5B,EAAKE,EAAMC,OAAOC,SAI5B,OACI,yBAAKZ,UAAU,UAEPK,EAAUQ,KAAI,SAACC,EAAMC,GACjB,OACI,yBAAKf,UAAU,QAAQE,MAAO,CAC1Bc,UAAU,cAAD,OAAgBT,EAAhB,QAERO,MAKjB,4BAAQG,GAAG,QAAQC,QA3Bd,WACCV,EAAJ,IAAND,GAAgB,KAAOF,EAAUc,OAAS,GAAWZ,EAAI,OA0BrD,MACA,4BAAQU,GAAG,UAAUC,QAxBd,WACXX,KAAO,KAAOF,EAAUc,OAAS,GAAKX,EAAK,GAAKA,EAAKD,EAAI,OAuBrD,QACA,yBAAKU,GAAG,eACJ,4BAAQC,QAAST,EAAMG,MAAO,GAA9B,KACA,4BAAQM,QAAST,EAAMG,MAAO,GAA9B,KACA,4BAAQM,QAAST,EAAMG,MAAO,GAA9B,KACA,4BAAQM,QAAST,EAAMG,MAAO,GAA9B,KACA,4BAAQM,QAAST,EAAMG,MAAO,GAA9B,OC1CD,SAASQ,IACpB,OACI,yBAAKpB,UAAU,UACX,yBAAKA,UAAU,eAAf,eAGA,yBAAKA,UAAU,cACX,uBAAGqB,KAAK,KAAR,WACA,uBAAGA,KAAK,KAAR,aCJD,SAASC,IACtB,OACE,yBAAKC,MAAM,aACT,kBAACH,EAAD,MACA,kBAAChB,EAAD,OCEcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8606c31.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default function SlideContent(props) {\r\n    let Background = process.env.PUBLIC_URL + props.path\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"slide-content-text\">\r\n                <h1 className=\"slide-title\">{props.title}</h1>\r\n                <p className=\"slide-paragraph\">Cras ac mi diam. Donec condimentum eget\r\n                egestas. Nam diam eros, convallis quis justo in,\r\n                pellentesque arcu convallis quis justo in, dictum.\r\nAenean vehicula accumsan rhoncus. as </p>\r\n            </div>\r\n            <div className=\"slide-content-image\" style={{ backgroundImage: `url(${Background})` }}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport default function SlideContent(props) {\r\n    let Background = process.env.PUBLIC_URL + props.path\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"slide-content-text-2\">\r\n                <h1 className=\"slide-title-2\">{props.title}</h1>\r\n                <p className=\"slide-paragraph-2\">Cras ac mi diam. Donec condimentum eget\r\n                egestas. Nam diam eros, convallis quis justo in,\r\n                pellentesque arcu convallis quis justo in, dictum.\r\nAenean vehicula accumsan rhoncus. as </p>\r\n            </div>\r\n            <div className=\"slide-content-image-2\" style={{ backgroundImage: `url(${Background})` }}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\n\r\nimport SlideContent from './slideContent';\r\nimport SlideContent2 from './slideContent2';\r\nimport '../../App.css'\r\n\r\nexport default function Slider() {\r\n\r\n    let sliderArr = [<SlideContent title=\"Hype Mapper: the new way to resell\" path=\"/img/first_slide_1.png\" />, <SlideContent2 title=\"Slide 2\" path=\"/img/first_slide_2.png\" />, <SlideContent2 title=\"Slide 3\" path=\"/img/first_slide_3.png\" />, <SlideContent title=\"Slide 4\" path=\"/img/first_slide_4.png\" />, <SlideContent title=\"Slide 5\" path=\"/img/first_slide_5.png\" />]\r\n    const [x, setX] = useState(0)\r\n    const goUp = () => {\r\n        x === 0 ? setX(-100 * (sliderArr.length - 1)) : setX(x + 100);\r\n    }\r\n\r\n    const goDown = () => {\r\n        x === -100 * (sliderArr.length - 1) ? setX(0) : setX(x - 100)\r\n\r\n    }\r\n\r\n    const goTo = (event) => {\r\n        setX((1 - (event.target.value)) * 100);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"slider\">\r\n            {\r\n                sliderArr.map((item, index) => {\r\n                    return (\r\n                        <div className=\"slide\" style={{\r\n                            transform: `translateY(${x}%)`\r\n                        }}>\r\n                            {item}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <button id=\"go-up\" onClick={goUp}>Up</button>\r\n            <button id=\"go-down\" onClick={goDown}>Down</button>\r\n            <div id=\"slide-count\">\r\n                <button onClick={goTo} value={1} >1</button>\r\n                <button onClick={goTo} value={2}>2</button>\r\n                <button onClick={goTo} value={3}>3</button>\r\n                <button onClick={goTo} value={4}>4</button>\r\n                <button onClick={goTo} value={5}>5</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-logo\">\r\n                Hype mapper\r\n            </div>\r\n            <div className=\"header-nav\">\r\n                <a href=\"#\">Sign up</a>\r\n                <a href=\"#\">Sign in</a>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport \"./App.css\";\r\nimport Slider from './components/organisms/slider';\r\nimport Header from './components/organisms/header';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div class=\"container\">\r\n      <Header />\r\n      <Slider />\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}